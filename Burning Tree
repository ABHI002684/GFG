/*
Given a binary tree and a node data called target. Find the minimum time required to burn the complete binary tree if the target is set on fire. 
It is known that in 1 second all nodes connected to a given node get burned. That is its left child, right child, and parent.
Note: The tree contains unique values.

Examples : 
Input:      
          1
        /   \
      2      3
    /  \      \
   4    5      6
       / \      \
      7   8      9
                   \
                   10
Target Node = 8
Output: 7
Explanation: If leaf with the value 8 is set on fire. 
After 1 sec: 5 is set on fire.
After 2 sec: 2, 7 are set to fire.
After 3 sec: 4, 1 are set to fire.
After 4 sec: 3 is set to fire.
After 5 sec: 6 is set to fire.
After 6 sec: 9 is set to fire.
After 7 sec: 10 is set to fire.
It takes 7s to burn the complete tree.

Input:      
          1
        /   \
      2      3
    /  \      \
   4    5      7
  /    / 
 8    10
Target Node = 10
Output: 5

Expected Time Complexity: O(number of nodes)
Expected Auxiliary Space: O(height of tree)

Constraints:
1 ≤ number of nodes ≤ 10^5
1 ≤ values of nodes ≤ 10^5

*/

/*
struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/
class Solution {
  public:
    
    
    void getTime(map<Node*,Node*>& mp,Node* start,int& t){
        queue<Node*> q;
        q.push(start);
        map<Node*,int> vis;
        vis[start]=1;
        
        while(!q.empty()){
            int s=q.size();
            int flag=0;
            for(int i=0;i<s;i++){
                Node* node=q.front();
                q.pop();
                
                //left child set on fire
                if(node->left && !vis[node->left]){
                    flag=1;
                    vis[node->left]=1;
                    q.push(node->left);
                }
                
                //right child set on fire
                if(node->right && !vis[node->right]){
                    flag=1;
                    vis[node->right]=1;
                    q.push(node->right);
                }
                
                //parent set on fire
                if(mp[node] && !vis[mp[node]]){
                    flag=1;
                    vis[mp[node]]=1;
                    q.push(mp[node]);
                }
            }
            
            if(flag){
                t++;
            }
        }
    }
    
    Node* bfs(Node* root,int target,map<Node*,Node*>& mp){
        queue<Node*> q;
        Node* start;
        q.push(root);
        
        while(!q.empty()){
            Node* node=q.front();
            q.pop();
            
            if(node->data==target){
                start=node;
                
            }
            
            if(node->left){
                mp[node->left]=node;
                q.push(node->left);
            }
            
            if(node->right){
                mp[node->right]=node;
                q.push(node->right);
            }
        }
        
        return start;
    }
    int minTime(Node* root, int target) 
    {
        int t=0;
        map<Node*,Node*> mp;
        Node* start=bfs(root,target,mp);
        getTime(mp,start,t);
        return t;
    }
};

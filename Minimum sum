/*
Given an array arr[] such that each element is in the range [0 - 9], find the minimum possible sum of two numbers formed using the elements of the array. 
All digits in the given array must be used to form the two numbers. Return a string without leading zeroes.

Examples :
Input: arr[] = [6, 8, 4, 5, 2, 3]
Output: 604
Explanation: The minimum sum is formed by numbers 358 and 246.

Input: arr[] = [5, 3, 0, 7, 4]
Output: 82
Explanation: The minimum sum is formed by numbers 35 and 047.

Input: arr[] = [9, 4]
Output: 13
Explanation: The minimum sum is formed by numbers 9 and 4.

Constraints:
1 ≤ arr.size() ≤ 10^6
0 ≤ arr[i] ≤ 9
*/
class Solution {
  public:
    string minSum(vector<int> &arr) {
        sort(arr.begin(), arr.end());     
        string a="", b="";
        int n=arr.size();
        for(int i=0; i<n; i++)
        {
            if(i%2)
            {
                b+=char(arr[i]+'0');
            }
            else
            {
                a+=char(arr[i]+'0');
            }
        }
        string ans="";
        reverse(a.begin(), a.end());
        reverse(b.begin(), b.end());
        int prev=0;
        for(int i=0; i<min(a.size(), b.size()); i++)
        {
            int cur=prev+(a[i]-'0')+(b[i]-'0');
            prev=cur/10;
            ans+=char((cur%10)+'0');
        }
        if(b.size()<a.size())
        {
            prev+=a[a.size()-1]-'0';
        }
        ans+=to_string(prev);
        while(ans.back()=='0') ans.pop_back();
        reverse(ans.begin(), ans.end());
        
        return ans;
    }
};

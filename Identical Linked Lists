/*
Given the two singly Linked Lists respectively. The task is to check whether two linked lists are identical or not. 
Two Linked Lists are identical when they have the same data and with the same arrangement too. If both Linked Lists are identical then return true otherwise return false. 

Examples:
Input:
LinkedList1: 1->2->3->4->5->6
LinkedList2: 99->59->42->20
Output: false

Input:
LinkedList1: 1->2->3->4->5
LinkedList2: 1->2->3->4->5
Output: true

Expected Time Complexity: O(n)
Expected Auxilliary Space: O(1)

Constraints:
1 <= length of lists <= 10^3

*/

/*
Structure of the node of the linked list is as
struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
};
*/

// Function to check whether two linked lists are identical or not.
bool areIdentical(struct Node *head1, struct Node *head2) {
    
    while(head1!=NULL && head2!=NULL)
    {
        if(head1->data!=head2->data){
            return false;
        }
        
        head1=head1->next;
        head2=head2->next;
        
        if((head1==NULL && head2!=NULL) ||(head1!=NULL && head2==NULL)) return false;
    }
    return true;
}

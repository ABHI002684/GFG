/*
Given an integer array nums and an integer k, return the length of the shortest non-empty subarray of nums with a sum of at least k. If there is no such subarray, return -1.
A subarray is a contiguous part of an array.

Example 1:
Input: nums = [1], k = 1
Output: 1

Example 2:
Input: nums = [1,2], k = 4
Output: -1

Example 3:
Input: nums = [2,-1,2], k = 3
Output: 3

Constraints:
1 <= nums.length <= 10^5
-105 <= nums[i] <= 10^5
1 <= k <= 10^9
*/
class Solution {
public:
    int shortestSubarray(vector<int>& nums, int k) {
        int ans = INT_MAX;
        long long sum = 0;
        deque<pair<long long, int>> dq;  
        
        for (int r = 0; r < nums.size(); r++) {
            sum += nums[r];
            
            if (sum >= k) {
                ans = min(ans, r + 1);
            }
            
            
            while (!dq.empty() && sum - dq.front().first >= k) {
                auto [prefix, idx] = dq.front();
                dq.pop_front();
                ans = min(ans, r - idx);
            }
            
            
            while (!dq.empty() && dq.back().first > sum) {
                dq.pop_back();
            }
            dq.push_back({sum, r});
        }
        
        return ans == INT_MAX ? -1 : ans;
    }
};

/*
Given an array arr[], where each element is at most k away from its target position, you need to sort the array optimally.
Note: You need to change the given array arr[] in place.

Examples:
Input: arr[] = [6, 5, 3, 2, 8, 10, 9], k = 3
Output: [2, 3, 5, 6, 8, 9, 10]
Explanation: The sorted array will be 2 3 5 6 8 9 10

Input: arr[]= [1, 4, 5, 2, 3, 6, 7, 8, 9, 10], k = 2
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Explanation: The sorted array will be 1 2 3 4 5 6 7 8 9 10

DO NOT use the direct library sort() function for this question.

Constraints:
1 ≤ arr.size() ≤ 10^6
0 ≤ k < arr.size()
1 ≤ arri ≤ 10^6
*/
class Solution {
  public:
    void nearlySorted(vector<int>& arr, int k) {
        int n=arr.size();
        // brute force
        // for(int i=0;i<n-1;i++){
        //     int mini=arr[i];
        //     int miniIdx=i;
        //     for(int j=i+1;j<n && j<=i+k ;j++){
        //         if(arr[j]<mini){
        //             mini=arr[j];
        //             miniIdx=j;
        //         }
        //     }
        //     if(miniIdx!=i){
        //         swap(arr[i],arr[miniIdx]);
        //     }
        // }
        
        // optimal approach
        
        priority_queue<int,vector<int>,greater<int>> pq;
        int j=0;
        for(int i=0;i<n;i++){
            pq.push(arr[i]);
            if(pq.size()>k){
                arr[j++]=pq.top();
                pq.pop();
            }
        }
        while(!pq.empty()){
            arr[j++]=pq.top();
            pq.pop();
        }
        
    }
};

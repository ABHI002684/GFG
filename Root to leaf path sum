/*
Given a binary tree and an integer target, check whether there is a root-to-leaf path with its sum as target.

Examples :
Input: tree = 1, target = 2
            /   \
          2     3
Output: false
Explanation: There is no root to leaf path with sum 2.

Input: tree = 1,  target = 4
            /   \
          2     3
Output: true
Explanation: The sum of path from leaf node 3 to root 1 is 4.

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(height of tree)

Constraints:
1 ≤ number of nodes ≤ 10^4
1 ≤ target ≤ 10^6
*/

/* A binary tree node
struct Node
{
    int data;
    Node* left, * right;
}; */

class Solution {
  public:
    bool hasPathSumHelper(Node *root, int target){
         if(!root) return false;
        if(!root->right && !root->left && target - root->data == 0) return true;
        if(!root->right && !root->left && target - root->data != 0) return false;
        
        return hasPathSum(root->right,target - root->data) || 
        hasPathSumHelper(root->left,target - root->data);
    }
    bool hasPathSum(Node *root, int target) {
         hasPathSumHelper(root,target);
    }
};

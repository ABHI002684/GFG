/*
Given a Matrix mat of n*n size. Your task is constructing a 2D linked list representation of the given matrix.

Input: mat = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
Output: 1 -> 2 ->3 -> NULL
        4 -> 5 ->6 -> NULL
        7 -> 8 ->9 -> NULL

Input: mat = [[23, 28], [23, 28]]
Output: 23 -> 28
        23 -> 28

Expected Time Complexity: O(n^2)
Expected Space Complexity: O(n^2)

Constraints:
1 <= mat.size() <=15
1 <= mat[i][j] <=10^4
*/
/*structure of the node of the linked list is as

struct Node
{
    int data;
    Node* right, *down;

    Node(int x){
        data = x;
        right = NULL;
        down = NULL;
    }
};
*/

// function must return the pointer to the first element of the in linked list i.e. that
// should be the element at arr[0][0]
class Solution {
  public:
    Node* constructLinkedMatrix(vector<vector<int>>& mat) {
        int n=mat.size();
        Node *prev=NULL,*upper=NULL,*start=NULL,*head=NULL;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                Node* temp=new Node(mat[i][j]);
                if(!head) head=temp;
                if(!upper) upper=start;
                if(i>0){
                    upper->down=temp;
                    upper=upper->right;
                }
                
                if(j==0) start=temp;
                
                if(j>0) prev->right=temp;
                
                prev=temp;
            }
        }
        return head;
    }
};

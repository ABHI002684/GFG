/*
Given a doubly linked list, each node is at most k-indices away from its target position. The problem is to sort the given doubly linked list. 
The distance can be assumed in either of the directions (left and right).

Examples :
Input: Doubly Linked List : 3 <-> 2 <-> 1 <-> 5 <-> 6 <-> 4 , k = 2
Output: 1 <-> 2 <-> 3 <-> 4 <-> 5 <-> 6
Explanation: After sorting the given 2-sorted list is 1 <-> 2 <-> 3 <-> 4 <-> 5 <-> 6.

Input: Doubly Linked List : 5 <-> 6 <-> 7 <-> 3 <-> 4 <-> 4 , k = 3
Output: 3 <-> 4 <-> 4 <-> 5 <-> 6 <-> 7
Explanation: After sorting the given 3-sorted list is 3 <-> 4 <-> 4 <-> 5 <-> 6 <-> 7.

Expected Time Complexity: O(n*logk)
Expected Auxiliary Space: O(k)

Constraints:
1 <= number of nodes <= 10^5
1 <= k < number of nodes
1 <= node->data <= 10^9
*/
/*
// a node of the doubly linked list
class DLLNode
{
public:
    int data;
    DLLNode *next;
    DLLNode *prev;
    DLLNode(int val)
    {
        data = val;
        this->next = NULL;
        this->prev = NULL;
    }
};
*/
class Solution {
  public:
    // function to sort a k sorted doubly linked list
    DLLNode *sortAKSortedDLL(DLLNode *head, int k) {
       priority_queue<int,vector<int>,greater<int>>pq;
       DLLNode *temp1=head;
       DLLNode *temp2=head;
       while(temp1){
           pq.push(temp1->data);
           if(pq.size()==k+1){
               temp2->data=pq.top();
               temp2=temp2->next;
               pq.pop();
           }
           temp1=temp1->next;
       }
       while(!pq.empty()){
           temp2->data=pq.top();
           temp2=temp2->next;
           pq.pop();
       }
       return head;
    }
};

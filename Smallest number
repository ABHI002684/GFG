/*
Given two integers s and d. The task is to find the smallest number such that the sum of its digits is s and the number of digits in the number are d. 
Return a string that is the smallest possible number. If it is not possible then return -1.

Examples:
Input: s = 9, d = 2
Output: 18 
Explanation: 18 is the smallest number possible with the sum of digits = 9 and total digits = 2.

Input: s = 20, d = 3 
Output: 299 
Explanation: 299 is the smallest number possible with the sum of digits = 20 and total digits = 3.

Expected Time Complexity: O(d)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ s ≤ 100
1 ≤ d ≤ 6

*/
class Solution {
  public:
    string smallestNumber(int s, int d) {
          if(s > 9*d) return "-1";
        string ans = "";
        int i=0;
        while(i++ < d) ans.push_back(' ');
        for(int i=d-1;i>=0;i--){
            if(s-1 >= 9){
                ans[i] = '9';
                s-=9;
            }
            else{
                if(i!=0){
                    char num = (s-1) + '0';
                    ans[i] = num;
                    s -= (s-1);
                    while(i!=0){
                        ans[--i] = '0';
                    }
                }
                ans[0] = s + '0';
                
            }
        }
        return ans;
    }
};

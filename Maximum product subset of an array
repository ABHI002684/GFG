/*
Given an array arr. The task is to find and return the maximum product possible with the subset of elements present in the array.

Note:
The maximum product can be a single element also.
Since the product can be large, return it modulo 10^9 + 7.

Examples:
Input: arr[] = [-1, 0, -2, 4, 3]
Output: 24
Explanation: Maximum product will be ( -1 * -2 * 4 * 3 ) = 24

Input: arr[] = [-1, 0]
Output: 0
Explanation: Maximum product will be ( -1 * 0) = 0

Input: arr[] = [5]
Output: 5
Explanation: Maximum product will be 5.

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 <= arr.size() <= 2 * 10^4
-10 <= arr[i] <= 10

*/

class Solution {
  public:
    long long int findMaxProduct(vector<int>& arr) {
        if(arr.size()==1) return arr[0];
        long long int pos=1,neg=1;
        long long int mod=1e9+7;
        int maxNegative=INT_MIN;
        int zeroCount=0,negCount=0,posCount=0;
        int n=arr.size();
        for(int i=0;i<n;i++)
        {
            if(arr[i]<0){
                neg=(neg*arr[i])%mod;
                maxNegative=max(maxNegative,arr[i]);
                negCount++;
            }
            
            if(arr[i]>0){
                pos=(pos*arr[i])%mod;
                posCount++;
            }
        }
       if(negCount<=1 && posCount==0) return 0;
       if(neg<0){
           neg/=maxNegative;
       }
        return (pos*neg)%mod;
    }
};

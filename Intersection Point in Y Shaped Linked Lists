/*
Given two singly linked lists, return the point where two linked lists intersect.
Note: If the linked lists do not merge at any point, return -1.

Examples:
Input: Linked list 1: 4->4->4->4->4, Linked list 2: 4->4->4
Output: 4
Explanation: From the above image, it is clearly seen that the common part is 4->4 whose starting point is 4.

Input: Linked list 1: 4->1->8->4->5, Linked List 2: 5->6->1->8->4->5
Output: 8
Explanation: From the above image, it is clearly seen that the common part is 8->4->5 whose starting point is 8.

Input: Linked list 1: 1->2->3, Linked list 2: 4->5->6
Output: -1
Explanation: There is no common part, so there is no interaction point.

Try to solve the problem without using any extra space.

Constraints:
2 ≤ size of first linkedist + size of second linkedlist ≤ 2*105
-10000 ≤ data of nodes ≤ 10000
*/
/* Linked List Node
struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
}; */

class Solution {
  public:
    // Function to find intersection point in Y shaped Linked Lists.
    int length(Node* head){
        int cnt=0;
        Node* temp=head;
        
        while(temp!=NULL){
            cnt++;
            temp=temp->next;
        }
        
        return cnt;
    }
    int intersectPoint(Node* head1, Node* head2) {
        int l1=length(head1);
        int l2=length(head2);
        
        if(l1>l2){
            int x=l1-l2;
            while(x--){
                head1=head1->next;
            }
        }else{
            int x=l2-l1;
            while(x--){
                head2=head2->next;
            }
        }
        
        while(head1!=NULL && head2!=NULL){
            if(head1==head2) return head1->data;
            
            head1=head1->next;
            head2=head2->next;
        }
        
        return -1;
    }
};

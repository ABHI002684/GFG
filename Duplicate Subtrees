/*
Given a binary tree, your task is to find all duplicate subtrees from the given binary tree.

Duplicate Subtree : Two trees are duplicates if they have the same structure with the same node values.

Note:  Return the root of each tree in the form of a list array & the driver code will print the tree in pre-order tree traversal in lexicographically increasing order.

Examples:
  
Input:     5
          / \
         4   6
        / \
       3   4
          / \
         3   6
Output: 
3
6
Explanation: In the above tree, there are two duplicate subtrees.i.e
3 and 6. Therefore, you need to return the above subtrees root in the form of a list. Here, 4 3  is not considered because for a subtree to be equal, it should have the same values as well as structure.
If we consider the first subtree on the left, it has  two children, 3 on the left and 4 3 6   on the right. And for the second subtree it has 3 on the left and 6 on the right.
Since the structures are not same for the subtrees hence they are not equal

Expected Time Complexity: O(n)
Expected Space Complexity: O(n)

Constraints:
1<= size of binary tree <=100

*/

class Solution {
  public:
  string dfs(Node *root, unordered_map<string, pair<Node *, int>> &mp)
  {
    if (!root)
        return "";

    string l = dfs(root->left, mp);
    string r = dfs(root->right, mp);

    string s = to_string(root->data) + "#" + l + "#" + r;
    if (mp.find(s) != mp.end())
    {
        mp[s].second++;
    }
    else
    {
        mp[s].first = root;
        mp[s].second = 1;
    }

    return s;
   }
    vector<Node*> printAllDups(Node* root) {
        
    unordered_map<string, pair<Node *, int>> mp;
    dfs(root, mp);
    vector<Node *> ans;
    for (auto i : mp)
        if (i.second.second >= 2)
            ans.push_back(i.second.first);
    return ans;
    }
};

/*
Given a binary matrix mat of size n * m, find out the maximum length of a side of a square sub-matrix with all 1s.

Examples:
Input: n = 6, m = 5
mat = [[0, 1, 1, 0, 1], 
       [1, 1, 0, 1, 0],
       [0, 1, 1, 1, 0],
       [1, 1, 1, 1, 0],
       [1, 1, 1, 1, 1],
       [0, 0, 0, 0, 0]]
Output: 3
Explanation: The maximum length of a side of the square sub-matrix is 3 where every element is 1.

Input: n = 2, m = 2
mat = [[1, 1], 
       [1, 1]]
Output: 2
Explanation: The maximum length of a side of the square sub-matrix is 2. The matrix itself is the maximum sized sub-matrix in this case.

Input: n = 2, m = 2
mat = [[0, 0], 
       [0, 0]]
Output: 0
Explanation: There is no 1 in the matrix.

Expected Time Complexity: O(n*m)
Expected Auxiliary Space: O(n*m)

Constraints:
1 ≤ n, m ≤ 500
0 ≤ mat[i][j] ≤ 1 

*/
class Solution {
  public:
    int maxSquareHelper(int n, int m, vector<vector<int>>& mat,int i,int j,int& maxi,vector<vector<int>>& dp){
        //base case
        if(i>=n || j>=m) return 0;
        
        if(dp[i][j]!=-1) return dp[i][j];
        
        //recursive case
        int right=maxSquareHelper(n,m,mat,i,j+1,maxi,dp);
        int diagonal=maxSquareHelper(n,m,mat,i+1,j+1,maxi,dp);
        int down=maxSquareHelper(n,m,mat,i+1,j,maxi,dp);
        
        if(mat[i][j]==1){
            dp[i][j]=1+min(right,min(down,diagonal));
            maxi=max(maxi,dp[i][j]);
            return dp[i][j];
        }else{
            return dp[i][j]=0;
        }
    }
    int maxSquare(int n, int m, vector<vector<int>> mat) {
        vector<vector<int>>dp(n,vector<int>(m,-1));
        int maxi=0;
        maxSquareHelper(n,m,mat,0,0,maxi,dp);
        return maxi;
    }
};

/*
You are given an array of integer nums[] where each number represents a vote to a candidate. 
Return the candidates that have votes greater than one-third of the total votes, If there's not a majority vote, return -1. 

Note: The answer should be returned in an increasing format.

Examples:
Input: nums = [2, 1, 5, 5, 5, 5, 6, 6, 6, 6, 6]
Output: [5, 6]
Explanation: 5 and 6 occur more n/3 times.

Input: nums = [1, 2, 3, 4, 5]
Output: [-1]
Explanation: no candidate occur more than n/3 times.

Expected Time Complexity: O(n)
Expected Space Complexity: O(1)

Constraint:
1 <= nums.size() <= 10^6
0 <= nums[i] <= 10^9
*/
class Solution {
  public:
    // Function to find the majority elements in the array
    vector<int> findMajority(vector<int>& nums) {
        int n=nums.size();
        int candidate1=0,candidate2=1,count1=0,count2=0;
        for(int i=0;i<n;i++){
            if(nums[i]==candidate1) count1++;
            else if(nums[i]==candidate2) count2++;
            else if(count1==0){ candidate1=nums[i]; count1++; }
            else if(count2==0){ candidate2=nums[i]; count2++; }
            else{ count1--; count2--; }
        }
        vector<int> majority;
        count1=count2=0;
        for(int i=0;i<n;i++){ 
            if(nums[i]==candidate1) count1++;
            if(nums[i]==candidate2) count2++;
        }
        if(count1>nums.size()/3) majority.push_back(candidate1);
        if(count2>nums.size()/3) majority.push_back(candidate2);
        if(majority.empty()) return {-1};
        if(majority.size()==2&&majority[0]>majority[1]) swap(majority[0],majority[1]);
        return majority;
    }
};

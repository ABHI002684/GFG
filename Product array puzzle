/*

Given an array nums[], construct a Product Array nums[] such that nums[i] is equal to the product of all the elements of nums except nums[i].

Examples:
Input: nums[] = [10, 3, 5, 6, 2]
Output: [180, 600, 360, 300, 900]
Explanation: For i=0, P[i] = 3*5*6*2 = 180.
For i=1, P[i] = 10*5*6*2 = 600.
For i=2, P[i] = 10*3*6*2 = 360.
For i=3, P[i] = 10*3*5*2 = 300.
For i=4, P[i] = 10*3*5*6 = 900.

Input: nums[] = [12,0]
Output: [0, 12]

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(n)

Constraints:
1 <= nums.size() <= 1000
0 <= nums[i] <= 200
nums[i] may contain duplicates.

*/
class Solution {
  public:
    // nums: given vector
    // return the Product vector P that hold product except self at each index
    vector<long long int> productExceptSelf(vector<long long int>& nums) {
        
        int n=nums.size();
        if(n==1){
            return {1};
        }
        vector<long long int> pre(n),suf(n);
        pre[0]=nums[0],suf[n-1]=nums[n-1];
        
        for(int i=1;i<n;i++){
            pre[i]=nums[i]*pre[i-1];
        }
        
        for(int i=n-2;i>=0;i--){
            suf[i]=nums[i]*suf[i+1];
        }
        
        vector<long long int> ans(n);
        ans[0]=suf[1],ans[n-1]=pre[n-2];
        
        
        for(int i=1;i<n-1;i++){
            ans[i]=pre[i-1]*suf[i+1];
        }
        return ans;
    }
};

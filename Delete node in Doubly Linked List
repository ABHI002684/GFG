/*
Given a doubly Linked list and a position. The task is to delete a node from a given position (position starts from 1) in a doubly linked list and return the head of the doubly Linked list.

Examples:
Input: LinkedList = 1 <--> 3 <--> 4, x = 3
Output: 1 3  
Explanation: 
After deleting the node at position 3 (position starts from 1),the linked list will be now as 1 <--> 3.
 
Input: LinkedList = 1 <--> 5 <--> 2 <--> 9, x = 1
Output: 5 2 9
Explanation:

Expected Time Complexity: O(n)
Expected Auxilliary Space: O(1)

Constraints:
2 <= size of the linked list(n) <= 10^5
1 <= x <= n
1 <= node.data <= 10^9

*/

/* Structure of Node
struct Node
{
  int data;
  struct Node *next;
  struct Node *prev;

  Node(int x){
      data = x;
      next = NULL;
      prev = NULL;
  }

};
*/

class Solution {
  public:
    Node* deleteNode(Node* head, int x) {
        if(head==NULL) return NULL;
        if(x==1){
              Node* p=head;
            head=head->next;
            if(head!=NULL){
                head->prev=NULL;
            }
            delete p;
            return head;
        }
        int i=1;
        Node* p=head;
        while(i<x && p!=NULL)
        {
            p=p->next;
            i++;
        }
         if (p == NULL) {
            return head;
        }

        if (p->next != NULL) {
            p->next->prev = p->prev;
        }

        if (p->prev != NULL) {
            p->prev->next = p->next;
        }

        delete p;
        return head;
    }
};

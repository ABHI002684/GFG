/*
Given a binary tree, where every node value is a number. Find the sum of all the numbers that are formed from root to leaf paths. 
The formation of the numbers would be like 10*parent + current (see the examples for more clarification).

Examples:
Input:      
Output: 13997
Explanation : There are 4 leaves, resulting in leaf path of 632, 6357, 6354, 654 sums to 13997.

Input:    
Output: 2630
Explanation: There are 3 leaves, resulting in leaf path of 1240, 1260, 130 sums to 2630.

Input:    
           1
          /
         2                    
Output: 12
Explanation: There is 1 leaf, resulting in leaf path of 12.
Constraints:
1 ≤ number of nodes ≤ 31
1 ≤ node->data ≤ 100
*/
 struct Node
 {
     int data;
     Node* left, *right;
}; */

class Solution {
  public:
  int total=0;
   void treeSum(Node* node,int sum){
        if(!node->left && !node->right){
            total+=sum;
            return;
        }
        
        if(node->left){
            treeSum(node->left,sum*10+node->left->data);
        }
        
        if(node->right){
            treeSum(node->right,sum*10+node->right->data);
        }
    }
    int treePathsSum(Node *root) {
        int sum=root->data;
        treeSum(root,sum);
        return total;
    }
};

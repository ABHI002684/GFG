/*
Given two positive integer arrays arr and brr, find the number of pairs such that x^y > y^x (raised to power of) where x is an element from arr and y is an element from brr.

Examples :
Input: arr[] = [2, 1, 6], brr[] = [1, 5]
Output: 3
Explanation: The pairs which follow x^y > y^x are: 2^1 > 1^2,  2^5 > 5^2 and 6^1 > 1^6 .

Input: arr[] = [2 3 4 5], brr[] = [1 2 3]
Output: 5
Explanation: The pairs which follow x^y > y^x are: 2^1 > 1^2 , 3^1 > 1^3 , 3^2 > 2^3 , 4^1 > 1^4 , 5^1 > 1^5 .

Expected Time Complexity: O((N + M)log(N)).
Expected Auxiliary Space: O(1).

Constraints:
1 ≤ arr.size(), brr.size() ≤ 10^5
1 ≤ brr[i], arr[i] ≤ 10^3
*/
class Solution {
  public:
    int binarySearch(int key,vector<int>& brr){
        int low=0,high=brr.size()-1,mid,index=-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(brr[mid]<=key){
                index=mid;
                low=mid+1;
            }else{
                high=mid-1;
            }
        }
        return index;
    }
    long long countPairs(vector<int> &arr, vector<int> &brr) {
        long long ans=0,one=0,two=0,threeFour=0;
        sort(brr.begin(),brr.end());
        for(auto x:brr){
            if(x==1) one++;
            else if(x==2) two++;
            else if(x==3 || x==4) threeFour++;
        }
        
        for(auto x:arr){
            if(x!=1){
                ans+=one;
                if(x==2) ans-=threeFour;
                else if(x==3) ans+=two;
                int index=binarySearch(x,brr);
                ans+=(brr.size()-index-1);
            }
        }
        return ans;
    }
};

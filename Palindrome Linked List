/*
Given a singly linked list of integers. The task is to check if the given linked list is palindrome or not.

Examples:
Input: LinkedList: 1->2->1->1->2->1
Output: true
Explanation: The given linked list is 1->2->1->1->2->1 , which is a palindrome and Hence, the output is true.

Input: LinkedList: 1->2->3->4
Output: false
Explanation: The given linked list is 1->2->3->4, which is not a palindrome and Hence, the output is false.

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1) 
Note: You should not use the recursive stack space as well

Constraints:
1 <= number of nodes <= 10^5
1 ≤ node->data ≤ 10^3
*/

/*
struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
};
*/

class Solution {
  public:
    // Function to check whether the list is palindrome.
    bool isPalindrome(Node *head) {
        // Your code here
          Node* rev_head=NULL;
        Node* root=head;
        while(root){
            Node *nxt=root->next;
            root->next=rev_head;
            rev_head=root;
            root=nxt;
        }
        while(rev_head && head){
            if(rev_head->data!=head->data)
            return false;
            rev_head=rev_head->next;
            head=head->next;
        }
        return true;
    }
};

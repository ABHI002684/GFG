/*
The n-queens puzzle is the problem of placing n queens on a (n×n) chessboard such that no two queens can attack each other.
Given an integer n, find all distinct solutions to the n-queens puzzle. Each solution contains distinct board configurations of the n-queens placement, 
where the solutions are a permutation of [1,2,3..n] in increasing order, here the number in the ith place denotes that the ith-column queen is placed in the row with that number.
For eg below figure represents a chessboard [3 1 4 2].

Examples:
Input: 1
Output: [1]
Explaination: Only one queen can be placed in the single cell available.

Input: 4
Output: [[2 4 1 3 ],[3 1 4 2 ]]
Explaination: These are the 2 possible solutions.

Expected Time Complexity: O(n!)
Expected Auxiliary Space: O(n^2) 

Constraints:
1 ≤ n ≤ 10
*/

class Solution{
public:
  bool isSafe(int i, int j, vector<int>& chessBoard, int n, vector<int>& col,
   vector<int> &diagonal_1, vector<int>& diagonal_2) {
        // top left
        if(diagonal_1[i-j+n-1] == 1) return false;
        // top
        if(col[j] == 1) return false;
        // top right
        if(diagonal_2[i+j] == 1) return false;
        return true;
    }
  
     void solveNQueensHelper(int i, int n,vector<int>& chessBoard, vector<int>& col, vector<int>& diagonal_1, vector<int>& diagonal_2,vector<vector<int>>& ans) {
       if(i == n) {
            ans.push_back(chessBoard);
            return;
        }
        for(int j = 0; j < n; j++) {
            if(isSafe(i, j, chessBoard, n, col, diagonal_1, diagonal_2)) {
                chessBoard[i] = j+1;
                col[j] = 1;
                diagonal_1[i-j+n-1] = 1;
                diagonal_2[i+j] = 1;
                solveNQueensHelper(i+1, n, chessBoard, col, diagonal_1, diagonal_2, ans);
                col[j] = 0;
                diagonal_1[i-j+n-1] = 0;
                diagonal_2[i+j] = 0;
            }
        }
    }
    vector<vector<int>> nQueen(int n) {
        vector<int> chessBoard(n, -1); 
        vector<int> col(n, 0);
        vector<int> diagonal_1(2 * n - 1, 0);
        vector<int> diagonal_2(2 * n - 1, 0);
        vector<vector<int>> ans;
        
        solveNQueensHelper(0, n, chessBoard, col, diagonal_1, diagonal_2, ans);
        return ans;
    }
};

/*
Given an array arr containing non-negative integers. Count and return an array ans where ans[i] denotes the number of smaller elements on right side of arr[i].

Examples:

Input: arr[] = [12, 1, 2, 3, 0, 11, 4]
Output: [6, 1, 1, 1, 0, 1, 0]
Explanation: There are 6 smaller elements right after 12. There is 1 smaller element right after 1. And so on.

Input: arr[] = [1, 2, 3, 4, 5]
Output: [0, 0, 0, 0, 0]
Explanation: There are 0 smaller elements right after 1. There are 0 smaller elements right after 2. And so on.

Expected Time Complexity: O(n*logn)
Expected Auxiliary Space: O(n)

Constraints:
1 ≤ arr.size() ≤ 10^6
0 ≤ arr[i]  ≤ 10^8

*/
class Solution {
  public:
    int binarySearch(vector<int>& temp,int target)
    {
        int ans=-1,st=0,en=temp.size()-1;
        while(st<=en){
            int mid=(st+en)/2;
            if(temp[mid]==target){
                ans=mid;
                en=mid-1;
            }else if(temp[mid]>target){
                en=mid-1;
            }else{
                st=mid+1;
            }
        }
        
        return ans;
    }
    vector<int> constructLowerArray(vector<int> &arr) {
         vector<int> ans,temp;
         for(auto x:arr) temp.push_back(x);
         sort(temp.begin(),temp.end());
         
         for(int i=0;i<arr.size();i++){
             int index=binarySearch(temp,arr[i]);
             ans.push_back(index);
             temp.erase(temp.begin()+index);
         }
         
         return ans;
    }
};

/*
Given a Binary Tree. You need to find and return the vertical width of the tree.

Examples :

Input:
         1
       /    \
      2      3
     / \    /  \
    4   5  6   7
            \   \
             8   9
Output: 6
Explanation: The width of a binary tree is
the number of vertical paths in that tree.

Input:
     1
    /  \
   2    3
Output: 3
Explanation: The above tree has 3 vertical lines, hence the answer is 3.

Expected Time Complexity: O(nlogn)
Expected Auxiliary Space: O(height of the tree).

Constraints:
0 <= number of nodes <= 10^4

*/

class Solution {
  public:
    // Function to find the vertical width of a Binary Tree.
    int verticalWidth(Node* root) {
          if (!root)  return 0;
          
    queue<pair<Node *, int>> q;
    q.push({root, 0});
    unordered_map<int, int> mp;
    while (!q.empty())
    {
        Node *tmp = q.front().first;
        int level = q.front().second;
        q.pop();
        mp[level] = tmp->data;
        if (tmp->left)
        {
            q.push({tmp->left, level - 1});
        }
        if (tmp->right)
        {
            q.push({tmp->right, level + 1});
        }
    }
    return mp.size();
    }
};

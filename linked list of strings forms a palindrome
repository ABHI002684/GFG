/*
Given a linked list with string data, check whether the combined string formed is palindrome. If the combined string is palindrome then return true otherwise return false.

Example:
Input:
Output : true
Explanation: As string "abcddcba" is palindrome the function should return true.

Input:
Output : false
Explanation: As string "abcdba" is not palindrome the function should return false.

Expected Time Complexity:  O(n)
Expected Auxiliary Space: O(n)

Constraints:
1 <= Node.data.length<= 10^3
1<=list.length<=10^3

*/

/*
The structure of linked list is the following
struct Node
{
    string data;
    Node* next;

    Node(int x){
        data = x;
        next = NULL;
    }
};
*/
class Solution {
  public:
    bool isPalindrome(string& s1)
    {
        int i=0,j=s1.size()-1;
        while(i<=j)
        {
            if(s1[i]!=s1[j]) return false;
            
            i++;j--;
        }
        
        return true;
    }
    bool compute(Node* head) {
        string s1="";
        while(head!=NULL)
        {
            s1+=head->data;
            
            head=head->next;
        }
        
        return isPalindrome(s1);
    }
};
